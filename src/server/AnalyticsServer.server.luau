local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
local function safeRequire(path)
    local success, result = pcall(function()
        return require(path)
    end)
    
    if not success then
        warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è:", path:GetFullName())
        return nil
    end
    
    return result
end

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
local Analytics = {
    Settings = safeRequire(script.Parent.Analytics.Config.AnalyticsSettings),
    SessionTracker = safeRequire(script.Parent.Analytics.Modules.SessionTracker),
    MetricsAggregator = safeRequire(script.Parent.Analytics.Modules.MetricsAggregator),
    DataExporter = safeRequire(script.Parent.Analytics.Modules.DataExporter)
}

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
for name, module in pairs(Analytics) do
    if not module then
        error(string.format("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: %s", name))
        return
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
local sessionTracker = Analytics.SessionTracker.new()
local metricsAggregator = Analytics.MetricsAggregator.new()
local dataExporter = Analytics.DataExporter.new()

-- –°–æ–∑–¥–∞–Ω–∏–µ RemoteEvents –¥–ª—è –∫–ª–∏–µ–Ω—Ç-—Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
local function createRemoteEvents()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    local events = {
        "AnalyticsEvent",
        "CheckpointEvent",
        "SessionEvent"
    }
    
    for _, eventName in ipairs(events) do
        if not ReplicatedStorage:FindFirstChild(eventName) then
            local event = Instance.new("RemoteEvent")
            event.Name = eventName
            event.Parent = ReplicatedStorage
            print(string.format("‚úÖ –°–æ–∑–¥–∞–Ω RemoteEvent: %s", eventName))
        end
    end
end

-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
local lastExportTime = 0

RunService.Heartbeat:Connect(function()
    local currentTime = os.time()
    if currentTime - lastExportTime >= Analytics.Settings.EXPORT.INTERVAL then
        local metrics = metricsAggregator:getMetrics()
        local exportData = {
            timestamp = currentTime,
            sessionData = sessionTracker:getAllSessions(),
            metrics = metrics
        }
        
        local success, result = pcall(function()
            return dataExporter:exportData(
                exportData, 
                Analytics.Settings.EXPORT.FORMAT
            )
        end)
        
        if success then
            print("üìä [ANALYTICS] –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        else
            warn("‚ö†Ô∏è [ANALYTICS] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", result)
        end
        
        lastExportTime = currentTime
    end
end)

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä–æ–∫–æ–≤
Players.PlayerAdded:Connect(function(player)
    local success, err = pcall(function()
        sessionTracker:startTracking(player)
        print(string.format("‚úÖ [ANALYTICS] –ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: %s", player.Name))
    end)
    
    if not success then
        warn(string.format("‚ö†Ô∏è [ANALYTICS] –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ %s: %s", player.Name, err))
    end
end)

Players.PlayerRemoving:Connect(function(player)
    local success, err = pcall(function()
        sessionTracker:endTracking(player, "player_left")
        metricsAggregator:addSession(sessionTracker:getSession(player))
        print(string.format("‚úÖ [ANALYTICS] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞: %s", player.Name))
    end)
    
    if not success then
        warn(string.format("‚ö†Ô∏è [ANALYTICS] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞ %s: %s", player.Name, err))
    end
end)

-- –°–æ–∑–¥–∞–µ–º RemoteEvents –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
createRemoteEvents()

print("‚úÖ [ANALYTICS] –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")