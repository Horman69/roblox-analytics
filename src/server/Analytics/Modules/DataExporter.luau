local DataStoreService = game:GetService("DataStoreService")
local HttpService = game:GetService("HttpService")

export type ExportFormat = "JSON" | "CSV"
export type ExportData = {
    timestamp: number,
    sessionData: {[string]: any},
    metrics: {[string]: any}
}

local DataExporter = {}
DataExporter.__index = DataExporter

local EXPORT_COOLDOWN = 5 -- –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏
local lastExportTime = 0

function DataExporter.new()
    local self = setmetatable({}, DataExporter)
    self._dataStore = DataStoreService:GetDataStore("AnalyticsExport")
    self._settings = require(script.Parent.Parent:WaitForChild("Config"):WaitForChild("AnalyticsSettings"))
    return self
end

function DataExporter:exportData(data: ExportData, format: ExportFormat): (boolean, string)
    local currentTime = os.time()
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if currentTime - lastExportTime < EXPORT_COOLDOWN then
        return false, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã —ç–∫—Å–ø–æ—Ä—Ç–∞"
    end

    if not data then
        return false, "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"
    end

    local success, result = pcall(function()
        if format == "JSON" then
            return self:_exportJSON(data)
        elseif format == "CSV" then
            return self:_exportCSV(data)
        end
        error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: " .. format)
    end)

    if not success then
        warn("‚ö†Ô∏è [DataExporter] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", result)
        return false, result
    end

    lastExportTime = currentTime
    return true, result
end

function DataExporter:_exportJSON(data: ExportData): string
    local success, result = pcall(function()
        return HttpService:JSONEncode({
            exportTime = os.date("%Y-%m-%d %H:%M:%S"),
            data = data
        })
    end)

    if not success then
        error("–û—à–∏–±–∫–∞ JSON —ç–∫—Å–ø–æ—Ä—Ç–∞: " .. tostring(result))
    end

    self:_saveExport("json", result)
    return result
end

function DataExporter:_exportCSV(data: ExportData): string
    local lines = {
        "Timestamp,PlayerID,PlayerName,SessionDuration,Checkpoints,DropReason"
    }

    -- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π –≤ CSV
    for _, session in pairs(data.sessionData) do
        local checkpoints = table.concat(session.checkpoints, "|")
        local line = string.format(
            "%d,%d,%s,%d,%s,%s",
            session.sessionStart,
            session.userId,
            session.playerName,
            session.duration or 0,
            checkpoints,
            session.dropReason or "none"
        )
        table.insert(lines, line)
    end

    local csvContent = table.concat(lines, "\n")
    self:_saveExport("csv", csvContent)
    return csvContent
end

function DataExporter:_saveExport(format: string, content: string)
    local timestamp = os.date("%Y%m%d_%H%M%S")
    local key = string.format("export_%s_%s", timestamp, format)

    local success, err = pcall(function()
        self._dataStore:SetAsync(key, content)
    end)

    if not success then
        warn("‚ö†Ô∏è [DataExporter] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", err)
    else
        print(string.format("üìä [DataExporter] –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s", key))
    end
end

return DataExporter